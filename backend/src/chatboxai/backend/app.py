import os
import re
import traceback
from dotenv import load_dotenv
from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
from sqlalchemy import create_engine, inspect, text

from langchain.prompts import PromptTemplate
from gemini_llm import GeminiLLM

load_dotenv()

app = FastAPI()

app.add_middleware(
    CORSMiddleware,
    allow_origins=["http://localhost:3000"],  # ƒê·ªïi theo ƒë·ªãa ch·ªâ frontend n·∫øu kh√°c
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

DATABASE_URL = os.getenv("DATABASE_URL")
if not DATABASE_URL:
    raise Exception("Thi·∫øu DATABASE_URL trong bi·∫øn m√¥i tr∆∞·ªùng")

engine = create_engine(DATABASE_URL)

def get_schema_str(engine):
    inspector = inspect(engine)
    schema_lines = []
    for table in inspector.get_table_names():
        schema_lines.append(f"- {table}:")
        for col in inspector.get_columns(table):
            schema_lines.append(f"  ‚Ä¢ {col['name']} ({col['type']})")

        fks = inspector.get_foreign_keys(table)
        for fk in fks:
            col_names = ", ".join(fk["constrained_columns"])
            referred_table = fk["referred_table"]
            referred_cols = ", ".join(fk["referred_columns"])
            schema_lines.append(f"  üîó FOREIGN KEY ({col_names}) REFERENCES {referred_table}({referred_cols})")

        for other_table in inspector.get_table_names():
            if other_table == table:
                continue
            other_fks = inspector.get_foreign_keys(other_table)
            for fk in other_fks:
                if table == fk["referred_table"]:
                    col_names = ", ".join(fk["constrained_columns"])
                    schema_lines.append(f"  üîó {other_table} c√≥ kh√≥a ngo·∫°i tham chi·∫øu ƒë·∫øn {table}: ({col_names})")

    return "\n".join(schema_lines)

schema_str = get_schema_str(engine)

def create_sql_prompt(schema_str):
    template = """
B·∫°n l√† tr·ª£ l√Ω AI chuy·ªÉn c√¢u h·ªèi ng√¥n ng·ªØ t·ª± nhi√™n sang c√¢u SQL SELECT h·ª£p l·ªá theo schema sau.

Schema database:
{schema_str}

H∆∞·ªõng d·∫´n ƒë·∫∑c bi·ªát:

- T·∫•t c·∫£ thu·ªôc t√≠nh nh∆∞ size, color, m√†u s·∫Øc, k√≠ch th∆∞·ªõc... l√† thu·ªôc t√≠nh c·ªßa bi·∫øn th·ªÉ (variant).
- Khi truy v·∫•n variant theo thu·ªôc t√≠nh, h√£y d√πng truy v·∫•n **kh√¥ng ph√¢n bi·ªát ch·ªØ hoa ch·ªØ th∆∞·ªùng**.
  - N·∫øu d√πng PostgreSQL, h√£y d√πng `ILIKE`.
  - N·∫øu d√πng MySQL ho·∫∑c SQLite, d√πng `LIKE` ho·∫∑c `LOWER(column) LIKE LOWER(value)`.
- Ph·∫£i ƒë·∫£m b·∫£o truy v·∫•n ƒë√∫ng ti·∫øng Vi·ªát c√≥ d·∫•u ho·∫∑c ti·∫øng Anh, kh√¥ng chuy·ªÉn ƒë·ªïi d·∫•u hay ng√¥n ng·ªØ.
- V√≠ d·ª•: n·∫øu user h·ªèi "s·∫£n ph·∫©m size M m√†u ƒë·ªè", h√£y l·ªçc variant theo sku m√† size ILIKE 'M' v√† color ILIKE 'ƒë·ªè'.
- KH√îNG ƒë∆∞·ª£c truy v·∫•n tr·ª±c ti·∫øp b·∫£ng Option hay OptionValue, ch·ªâ JOIN ƒë·ªÉ l·∫•y th√¥ng tin variant.
- Khi truy v·∫•n d·ªØ li·ªáu s·∫£n ph·∫©m product ho·∫∑c variant, lu√¥n bao g·ªìm √≠t nh·∫•t c√°c tr∆∞·ªùng sau trong k·∫øt qu·∫£ (v·ªõi alias nh∆∞ b√™n d∆∞·ªõi):

  - product.title AS title
  - variant.sku AS sku
  - variant.image_url AS imageUrl
  - variant.price AS price
  - variant.size AS size
  - variant.color AS color

- K·∫øt qu·∫£ tr·∫£ v·ªÅ ph·∫£i c√≥ ƒë√∫ng c√°c c·ªôt alias nh∆∞ tr√™n, kh√¥ng ƒë·ªïi t√™n.

Y√™u c·∫ßu:

- Tr·∫£ v·ªÅ c√¢u SQL SELECT h·ª£p l·ªá, d√πng truy v·∫•n kh√¥ng ph√¢n bi·ªát hoa th∆∞·ªùng nh∆∞ h∆∞·ªõng d·∫´n tr√™n.
- KH√îNG th√™m ch√∫ th√≠ch hay gi·∫£i th√≠ch, ch·ªâ tr·∫£ v·ªÅ c√¢u SQL.

C√¢u h·ªèi: {{input}}

SQL:
"""
    return PromptTemplate.from_template(template.format(schema_str=schema_str))

sql_prompt = create_sql_prompt(schema_str)

gemini_llm = GeminiLLM(api_key=os.getenv("GEMINI_API_KEY"))

class QueryRequest(BaseModel):
    question: str

def normalize_row(row):
    return {
        "title": row.get("title"),
        "sku": row.get("sku"),
        "imageUrl": row.get("imageUrl"),
        "price": row.get("price"),
        "size": row.get("size"),
        "color": row.get("color"),
    }

@app.post("/query")
async def query(request: QueryRequest):
    try:
        # Sinh c√¢u SQL t·ª´ ng√¥n ng·ªØ t·ª± nhi√™n
        chain = sql_prompt | gemini_llm
        response = chain.invoke({"input": request.question})
        sql = response.content if hasattr(response, "content") else response

        # L√†m s·∫°ch SQL n·∫øu c√≥ m√£ markdown
        sql = re.sub(r"^```sql\s*", "", sql.strip())
        sql = re.sub(r"\s*```$", "", sql)

        print(f"[DEBUG] SQL sinh ra t·ª´ LLM:\n{sql}\n")

        if not sql.lower().strip().startswith("select"):
            raise HTTPException(status_code=400, detail="Ch·ªâ cho ph√©p c√¢u truy v·∫•n SELECT.")

        # Th·ª±c thi SQL
        with engine.connect() as conn:
            result = conn.execute(text(sql))
            rows = result.mappings().all()

        print(f"[DEBUG] D·ªØ li·ªáu tr·∫£ v·ªÅ:\n{rows}\n")

        normalized_rows = [normalize_row(dict(r)) for r in rows]

        if normalized_rows:
            return {"data": normalized_rows}
        else:
            friendly_response = await generate_no_data_response(request.question)
            return {"message": friendly_response, "data": []}

    except HTTPException:
        raise
    except Exception as e:
        traceback.print_exc()
        raise HTTPException(status_code=500, detail=f"L·ªói server: {str(e)}")

async def generate_no_data_response(question: str) -> str:
    prompt = f"""
C√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng: "{question}"

Kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£ trong c∆° s·ªü d·ªØ li·ªáu.

H√£y ph·∫£n h·ªìi l·∫°i b·∫±ng m·ªôt c√¢u l·ªãch s·ª±, t·ª± nhi√™n b·∫±ng ti·∫øng Vi·ªát, gi·∫£i th√≠ch r·∫±ng kh√¥ng c√≥ d·ªØ li·ªáu ph√π h·ª£p v·ªõi y√™u c·∫ßu, v√≠ d·ª• nh∆∞ s·∫£n ph·∫©m h·∫øt h√†ng, kh√¥ng t·ªìn t·∫°i, ho·∫∑c kh√¥ng t√¨m th·∫•y th√¥ng tin.
Tr√°nh d√πng t·ª´ k·ªπ thu·∫≠t nh∆∞ "database", "SQL", "truy v·∫•n", ch·ªâ d√πng ng√¥n ng·ªØ th√¢n thi·ªán.

Tr·∫£ l·ªùi:
"""
    response = gemini_llm.invoke(prompt)
    return response.content if hasattr(response, "content") else response
