generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum DiscountStatus {
  ACTIVE
  INACTIVE
  EXPIRED
}

enum DiscountType {
  PERCENTAGE
  FIXED_AMOUNT
}

enum ApplyType {
  CATEGORY
  PRODUCT
  ALL
}

enum InventoryStatus {
  IN_STOCK
  OUT_OF_STOCK
  PRE_ORDER
  DAMAGED
  RETURNED
}

enum InvoiceStatus {
  UNPAID
  PENDING
  PAID
  CANCELLED
  REFUNDED
  PARTIALLY_REFUNDED
  FAILED
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  RETURNED
}

enum PaymentMethod {
  COD 
  PAYPAL
  VNPAY
}

enum PaymentStatus {
  UNPAID
  PAID
  FAILED
  REFUNDED
}

enum RefundStatus {
  NONE
  PENDING
  COMPLETED
  FAILED
}

enum ReturnStatus {
  PENDING
  APPROVED
  REJECTED
  COMPLETED
}

enum VariantStatus {
  AVAILABLE
  OUT_OF_STOCK
  DISCONTINUED
}

enum RoleEnum {
  ADMIN
  USER
  MANAGER
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}

enum TransactionType {
  PAYMENT
  REFUND
}

enum VoucherStatus {
  ACTIVE
  INACTIVE
  EXPIRED
}

enum VoucherType {
  PERCENTAGE
  FIXED_AMOUNT
}

enum WarehouseStatus {
  ACTIVE
  INACTIVE
}

enum WeightUnit {
  GRAMS
  KILOS
  POUNDS
  OUNCES
}

model User {
  id                 String         @id @default(uuid())
  email              String         @unique
  password           String
  phone              String
  name               String
  isVerified         Boolean        @default(false)
  roles              UserRole[]
  emailVerifications Verification[]
  addresses          Address[]
  cart               Cart?
  orders             Order[]
  payments           Payment[]
  transactions       Transaction[]
  refreshToken       RefreshToken?
  returns            Return[]
  wishlist           Wishlist?
  vouchersUsed       VoucherUsage[]
  Invoice            Invoice[]
  Review             Review[]
  createdAt         DateTime       @default(now())
  updatedAt DateTime @updatedAt @default(now())

  @@map("users")
}

model Role {
  id    String     @id @default(uuid())
  name  RoleEnum
  users UserRole[]
  createdAt         DateTime       @default(now())
  updatedAt DateTime @updatedAt @default(now())

  @@map("roles")
}

model UserRole {
  user    User   @relation(fields: [user_id], references: [id])
  user_id String
  role    Role   @relation(fields: [role_id], references: [id])
  role_id String
  createdAt         DateTime       @default(now())
  updatedAt DateTime @updatedAt @default(now())

  @@id([user_id, role_id])
  @@map("user_roles")
}

model Address {
  id            String @id @default(uuid())
  fullName      String
  phone         String
  streetAddress String
  ward          String
  district      String
  city          String
  country       String
  user          User   @relation(fields: [userId], references: [id])
  userId        String
  createdAt         DateTime       @default(now())
  updatedAt DateTime @updatedAt @default(now())
  @@map("shipping_addresses")
}

model Brand {
  id       String    @id @default(uuid())
  name     String
  logo     String?
  products Product[]
  createdAt         DateTime       @default(now())
  updatedAt DateTime @updatedAt @default(now())
  @@map("brands")
}

model Cart {
  id          String     @id @default(uuid())
  totalAmount Int        @default(0)
  user        User       @relation(fields: [userId], references: [id])
  userId      String     @unique @map("user_id")
  items       CartItem[]
  createdAt         DateTime       @default(now())
  updatedAt DateTime @updatedAt @default(now())
  @@map("cart")
}

model CartItem {
  id         String  @id @default(uuid())
  cart       Cart    @relation(fields: [cartId], references: [id])
  cartId     String
  variant    Variant @relation(fields: [variantId], references: [id])
  variantId  String
  quantity   Int
  totalPrice Int
  isSelected Boolean @default(false)
  createdAt         DateTime       @default(now())
  updatedAt DateTime @updatedAt @default(now())
  @@map("cart_items")
}

model Category {
  id            String             @id @default(uuid())
  name          String
  image         String?            @db.Text
  parent        Category?          @relation("CategoryToCategory", fields: [parentId], references: [id])
  parentId      String?
  subCategories Category[]         @relation("CategoryToCategory")
  discount      CategoryDiscount[]
  products      Product[]
  createdAt         DateTime       @default(now())
  updatedAt DateTime @updatedAt @default(now())
  @@map("categories")
}

model Discount {
  id         String             @id @default(uuid())
  discount   Int
  type       DiscountType
  startDate  DateTime
  endDate    DateTime
  status     DiscountStatus
  applyType  ApplyType
  categories CategoryDiscount[]
  products   ProductDiscount[]
  createdAt         DateTime       @default(now())
  updatedAt DateTime @updatedAt @default(now())
  @@map("discounts")
}

model CategoryDiscount {
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String   @map("category_id")

  discount   Discount @relation(fields: [discountId], references: [id])
  discountId String   @map("discount_id")
  createdAt         DateTime       @default(now())
  updatedAt DateTime @updatedAt @default(now())
  @@id([categoryId, discountId])
  @@map("category_discounts")
}

model ProductDiscount {
  product   Product @relation(fields: [productId], references: [id])
  productId String  @map("product_id")

  discount   Discount @relation(fields: [discountId], references: [id])
  discountId String   @map("discount_id")
  createdAt         DateTime       @default(now())
  updatedAt DateTime @updatedAt @default(now())
  @@id([productId, discountId])
  @@map("product_discounts")
}

model Image {
  id          String   @id @default(uuid())
  imageUrl    String   @db.Text
  product     Product? @relation(fields: [productId], references: [id])
  productId   String?
  variant     Variant? @relation(fields: [variantId], references: [id])
  variantId   String?
  isThumbnail Boolean  @default(false)
  createdAt         DateTime       @default(now())
  updatedAt DateTime @updatedAt @default(now())
  @@map("images")
}

model Inventory {
  id          String          @id @default(uuid())
  variant     Variant         @relation(fields: [variantId], references: [id])
  variantId   String
  warehouse   Warehouse       @relation(fields: [warehouseId], references: [id])
  warehouseId String
  quantity    Int
  reserved    Int
  status      InventoryStatus
  createdAt         DateTime       @default(now())
  updatedAt DateTime @updatedAt @default(now())
  @@unique([variantId, warehouseId])
  @@map("inventory")
}

model Invoice {
  id            String        @id @default(uuid())
  user          User          @relation(fields: [userId], references: [id])
  userId        String
  transaction   Transaction   @relation(fields: [transactionId], references: [id])
  transactionId String        @unique
  invoiceNumber String        @unique
  totalAmount   Int
  status        InvoiceStatus
  items         InvoiceItem[]
  createdAt         DateTime       @default(now())
  updatedAt DateTime @updatedAt @default(now())
  @@map("invoices")
}

model InvoiceItem {
  id          String    @id @default(uuid())
  invoice     Invoice   @relation(fields: [invoiceId], references: [id])
  invoiceId   String
  orderItem   OrderItem @relation(fields: [orderItemId], references: [id])
  orderItemId String    @unique
  createdAt         DateTime       @default(now())
  updatedAt DateTime @updatedAt @default(now())
  @@map("invoice_items")
}

model Voucher {
  id            String         @id @default(uuid())
  code          String         @unique
  discountValue Int
  maxDiscount   Int?
  type          VoucherType
  startDate     DateTime
  endDate       DateTime
  status        VoucherStatus
  minPrice      Int?
  usageLimit    Int
  usedCount     Int            @default(0)
  isPublic      Boolean        @default(true)
  orders        Order[]
  usages        VoucherUsage[]
  createdAt         DateTime       @default(now())
  updatedAt DateTime @updatedAt @default(now())
  @@map("vouchers")
}


model Order {
  id              String         @id @default(uuid())
  user            User           @relation(fields: [userId], references: [id])
  userId          String
  total           Int
  status          OrderStatus
  voucher         Voucher?       @relation(fields: [voucherId], references: [id])
  voucherId       String?
  voucherDiscount Int            @default(0)
  paymentMethod PaymentMethod @default(COD)
  fullName        String
  phone           String
  streetAddress   String
  ward            String
  district        String
  city            String
  province        String
  country         String
  items           OrderItem[]    @relation("OrderToOrderItems") // Explicit relation name
  payments        Payment[]
  returns         Return[]
  VoucherUsage    VoucherUsage[]
  createdAt         DateTime       @default(now())
  updatedAt DateTime @updatedAt @default(now())
  @@map("orders")
}

model OrderItem {
  id          String       @id @default(uuid())
  order       Order        @relation("OrderToOrderItems", fields: [orderId], references: [id])
  orderId     String
  variant     Variant      @relation(fields: [variantId], references: [id])
  variantId   String
  quantity    Int
  unitPrice   Int
  price       Int
  discount    Int
  invoiceItem InvoiceItem?
  returnItems ReturnItem[]
  createdAt         DateTime       @default(now())
  updatedAt DateTime @updatedAt @default(now())
  @@map("order_item")
}

model Payment {
  id           String        @id @default(uuid())
  order        Order         @relation(fields: [orderId], references: [id])
  orderId      String        @unique
  user         User          @relation(fields: [userId], references: [id])
  userId       String
  totalAmount  Int
  method       PaymentMethod
  status       PaymentStatus
  refundStatus RefundStatus
  transactions Transaction[]
  createdAt         DateTime       @default(now())
  updatedAt DateTime @updatedAt @default(now())
  @@map("payments")
}

model Product {
  id          String            @id @default(uuid())
  title       String
  description String?           @db.Text
  rating      Int?
  category    Category?         @relation(fields: [categoryId], references: [id])
  categoryId  String?
  brand       Brand?            @relation(fields: [brandId], references: [id])
  brandId     String?
  images      Image[]
  discounts   ProductDiscount[]
  variants    Variant[]
  options     Option[]
  reviews     Review[]
  createdAt   DateTime          @default(now())
  updatedAt DateTime @updatedAt @default(now())
  @@map("products")
}

model Wishlist {
  id       String            @id @default(uuid())
  user     User              @relation(fields: [userId], references: [id])
  userId   String            @unique
  products WishlistProduct[]
  createdAt         DateTime       @default(now())
  updatedAt DateTime @updatedAt @default(now())
  @@map("wishlist")
}

model WishlistProduct {
  id         String    @id @default(uuid())
  wishlist   Wishlist  @relation(fields: [wishlistId], references: [id])
  wishlistId String
  variant    Variant   @relation(fields: [variantId], references: [id])
  variantId  String
createdAt         DateTime       @default(now())
  updatedAt DateTime @updatedAt @default(now())
  @@unique([wishlistId, variantId])
  @@map("wishlist_products")
}


model Variant {
  id             String               @id @default(uuid())
  sku            String               
  price          Int?
  compareAtPrice Int?                 @map("compare_at_price")
  weight         Float?
  weightUnit     WeightUnit           @default(GRAMS)
  dimensions     String?
  description    String?
  optionValues   VariantOptionValue[]
  product        Product              @relation(fields: [productId], references: [id])
  productId      String
  status         VariantStatus        @default(AVAILABLE)
  images         Image[]
  inventory      Inventory[]
  cartItems      CartItem[]
  orderItems     OrderItem[]
  wishlistItems  WishlistProduct[]
  createdAt         DateTime       @default(now())
  updatedAt DateTime @updatedAt @default(now())
  @@map("variants")
}

model Option {
  id        String        @id @default(uuid())
  name      String
  product   Product       @relation(fields: [productId], references: [id])
  productId String
  values    OptionValue[]
  createdAt         DateTime       @default(now())
  updatedAt DateTime @updatedAt @default(now())
  @@map("options")
}

model OptionValue {
  id       String               @id @default(uuid())
  value    String
  option   Option               @relation(fields: [optionId], references: [id])
  optionId String
  variants VariantOptionValue[]
  createdAt         DateTime       @default(now())
  updatedAt DateTime @updatedAt @default(now())
  @@map("option_values")
}

model VariantOptionValue {
  id            String      @id @default(uuid())
  variant       Variant     @relation(fields: [variantId], references: [id])
  variantId     String
  optionValue   OptionValue @relation(fields: [optionValueId], references: [id])
  optionValueId String
   createdAt         DateTime       @default(now())
  updatedAt DateTime @updatedAt @default(now())
  @@unique([variantId, optionValueId])
  @@map("variant_option_values")
}

model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @db.Text
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique
  expiredAt DateTime
  createdAt         DateTime       @default(now())
  updatedAt DateTime @updatedAt @default(now())
  @@map("refresh_token")
}

model Return {
  id      String       @id @default(uuid())
  order   Order        @relation(fields: [orderId], references: [id])
  orderId String
  user    User         @relation(fields: [userId], references: [id])
  userId  String
  status  ReturnStatus
  reason  String?
  items   ReturnItem[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
  @@map("returns")
}

model ReturnItem {
  id          String    @id @default(uuid())
  return      Return    @relation(fields: [returnId], references: [id])
  returnId    String
  orderItem   OrderItem @relation(fields: [orderItemId], references: [id])
  orderItemId String
  quantity    Int
createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())

  @@map("return_items")
}

model Review {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  rating    Int
  content   String?
  images    String? @db.Text
  parent    Review?  @relation("ReviewToReview", fields: [parentId], references: [id])
  parentId  String?
  replies   Review[] @relation("ReviewToReview")
  isHidden   Boolean  @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())

 @@map("reviews")
}

model Transaction {
  id              String            @id @default(uuid())
  payment         Payment           @relation(fields: [paymentId], references: [id])
  paymentId       String
  user            User              @relation(fields: [userId], references: [id])
  userId          String
  amount          Int
  type            TransactionType
  status          TransactionStatus
  transactionCode String?           @unique
  invoice         Invoice?
  metadata        Json? 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())

  @@map("transactions")
}

model Verification {
  id        String   @id @default(uuid())
  otp       String
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique
  expiredAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())


  @@map("email_verifications")
}


model VoucherUsage {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  voucher   Voucher  @relation(fields: [voucherId], references: [id])
  voucherId String
  order     Order?   @relation(fields: [orderId], references: [id],map: "voucher_usages_orderId_fkey")
  orderId   String?
  usedAt    DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
 
  @@map("voucher_usages")
}

model Warehouse {
  id          String          @id @default(uuid())
  name        String          @unique
  location    String?
  status      WarehouseStatus
  inventories Inventory[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())

  @@map("warehouse")
}
